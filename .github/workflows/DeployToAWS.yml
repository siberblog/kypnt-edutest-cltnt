name: Deploy to AWS-EC2

env:
  AWS_EC2_PUBLIC_IP: kps.sytes.net
  AWS_EC2_USERNAME: ubuntu
  AWS_REGION: eu-west-2
  SERVICE_NAME: edutest-fe-test
  SERVICE_PORT: 80
  LOGSTASH_URI: "udp://192.168.122.200:5000"
on:
  push:
    branches:
      - main
jobs:
  merge_job:
    name: Build, Push and Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract project informations
        id: version
        run: |
          echo ::set-output name=sha_short::$(git rev-parse --short HEAD)
          echo ::set-output name=ECR_REGISTRY::${{ steps.login-ecr.outputs.registry }}

      - name: Build the Docker image
        env:
          ECR_REGISTRY: ${{ steps.version.outputs.ECR_REGISTRY }}
          REPO_NAME: ${{ env.SERVICE_NAME }}
          RUN_NUMBER: ${{ github.run_number }}
          SHA_SHORT: ${{ steps.version.outputs.sha_short }}
        run: |
          pwd
          docker build --file Dockerfile --tag=${ECR_REGISTRY}/${REPO_NAME}:latest --rm=true .
          docker tag ${ECR_REGISTRY}/${REPO_NAME}:latest ${ECR_REGISTRY}/${REPO_NAME}:v0.1.${RUN_NUMBER}-${SHA_SHORT}
          docker images

      - name: Push to AWS-ECR
        env:
          ECR_REGISTRY: ${{ steps.version.outputs.ECR_REGISTRY }}
          REPO_NAME: ${{ env.SERVICE_NAME }}
          RUN_NUMBER: ${{ github.run_number }}
          SHA_SHORT: ${{ steps.version.outputs.sha_short }}
        run: |
          docker push ${ECR_REGISTRY}/${REPO_NAME}:latest
          docker push ${ECR_REGISTRY}/${REPO_NAME}:v0.1.${RUN_NUMBER}-${SHA_SHORT}

      - name: Deploy to EC2
        env:
          AWS_EC2_PEM: ${{ secrets.AWS_EC2_PEM  }}
          AWS_EC2_PUBLIC_IP: ${{ env.AWS_EC2_PUBLIC_IP }}
          AWS_EC2_USERNAME: ${{ env.AWS_EC2_USERNAME }}
          AWS_REGION: ${{ env.AWS_REGION }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          ECR_REGISTRY: ${{ steps.version.outputs.ECR_REGISTRY }}
        run: |
          echo "$AWS_EC2_PEM" > private_key.pem && chmod 400 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${AWS_EC2_USERNAME}@${AWS_EC2_PUBLIC_IP} '
          echo "${ECR_REGISTRY} ${SERVICE_NAME} ${AWS_REGION}"
          hostname
          echo "File List"
          ls -a
          echo "PWD"
          pwd
          sudo docker ps -a
          USER_ID=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep '"accountId"' | cut -d\" -f4)
          echo "USERRRRR ${USER_ID}"
          echo $(aws ecr get-authorization-token --region ${AWS_REGION} --output text --query 'authorizationData[].authorizationToken' | base64 -d | cut -d: -f2) | docker login -u AWS https://210329335172.dkr.ecr.eu-west-2.amazonaws.com --password-stdinsudo 
          docker pull ${ECR_REGISTRY}/${SERVICE_NAME}:latest
          sudo docker rm -f $(docker ps -aqf "name=${SERVICE_NAME}") || true
          sudo docker run -d --name ${SERVICE_NAME} -p 90:80 ${ECR_REGISTRY}/${SERVICE_NAME}:latest
          sudo docker ps -a
          '
          
